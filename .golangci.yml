run:
  concurrency:            64        # Максимальное использование процессоров.
  timeout:                5m        # Увеличиваем таймаут на выполнение линтера.
  modules-download-mode:  readonly
  allow-parallel-runners: true
  allow-serial-runners:   true

output:
  print-issued-lines: true    # Печатает строку, в которой найдена проблема.
  print-linter-name:  true    # Печатает название линтера
  sort-results:       true    # Нет ограничения на одинаковые проблемы.

issues:
  exclude-rules:
    - path: .                 # Исключить линтеры для всех файлов.
      linters:
        - lll                 # Убираем ограничение на длину строки
        - exhaustruct         # Отключаем запрет на структуры с неинициализированными данными.
        - nestif              # Функционал перекрывается линтером gocyclo
        - gocyclo             # Функционал перекрывается линтером cyclop
        - gci                 # Линтер проверки сортировки импортов
        - varnamelen          # Слишком много false positive на легитимных кейсах (w writer, h handler и т.д.)
        - dupword             # Кажется, только на false positives триггерится.
        - wastedassign        # дублирует ineffassign
        - forcetypeassert     # Отключает проверку type Assertion, ибо работает криво. Как альтернатива работает линтер errorlint
        - ireturn

        # ВРЕМЕННО:
        - wsl                 # Полезный линтер, но нестабильный, временно отключен
        - err113              # Отключает обязательную обёртку ошибок.
        - wrapcheck           # Отключает проверку обязательного обертывания функции перед возвратом результата (return func()).
        - whitespace          # У линтера странные понятия о красоте, не даёт отступить от заголовка цикла с комментарием

    - path: _test\.go         # Исключить линтеры для тестовых файлов.
      linters:
        - tparallel           # Дублирует paralleltest
        - testpackage         # Отключает требование хранить тесты в отдельном пакете
        - funlen              # Отключает ограничение на размер функции
        - depguard            # Разрешает пользоваться заблокированными пакетами
        - gochecknoglobals    # Разрешает пользоваться глобальными переменными
        - gocritic            # Плевать нам на производительность в тестах
        - dupword             # Никого не волнуют дубликаты кода в тестах
        - gocognit            # В тестах ограничений по когнитивной сложности быть не должно
        - cyclop              # И опять то же самое
        - dupl                # Дубликаты в тестах - нормально явление
        - gosimple            # Можно не проверять кастуемые значения
        - containedctx        # Довольно частая ситуация в тестах, ибо все входящие параметры (включая контекст), собираются в одной структуре

        # ВРЕМЕННО:
        - wsl                 # Полезный линтер, но нестабильный, временно отключен
        - err113              # Отключает обязательную обёртку ошибок.
        - wrapcheck           # Отключает проверку обязательного обертывания функции перед возвратом результата (return func()).

    # Разрешить запрещённые пакеты там, где мы реализуем эту функциональность
    - path: pkg/(errors|log|telemetry)/.*\.go
      linters:
        - depguard
        - forbidigo

severity:
  #default-severity: info      # По-умолчанию линтеры считаются информациооными, golangci выйдет с кодом 0
  default-severity: error     # По-умолчанию линтеры считаются ошибочными, при срабатывании любого golangci выйдет с кодом, отличным от 0
  rules:
    - severity: info          # Нижеуказанные линтеры считаются информационными, при их срабатывании golangci выйдет с кодом 0
      linters:
        - forbidigo           # Запрещает использовать fmt.Print(|f|ln), так как подобное, обычно, используется для отладки
    - severity: error         # Нижеуказанные линтеры считаются ошибочными, при их срабатывании golangci выйдет с кодом, отличными от нуля
      linters:
        - govet               # Линтер govet считается критичным.
        - staticcheck         # Линтер staticcheck считается критичным.
        - errcheck            # Линтер errcheck считается критичным.
        - gocritic            # Линтер gocritic считается критичным.
        - deadcode            # Линтер deadcode считается критичным.
        - gosimple            # Линтер gosimple считается критичным.
        - depguard            # Линтер проверки зависимостей

linters-settings:
  tagalign:
    sort: true
    order:
      - yaml
      - json

  forbidigo:
    forbid:
      - p:   ^(fmt\.Print(|f|ln)|print|println)$
        msg: log should be used for debug output
      - p:   ^fmt\.Errorf$
        msg: errors.Errorf should be used instead

  depguard:
    rules:
      main:
        list-mode: lax # разрешить все пакеты кроме запрещённых
        files:
          - $all
        deny:
          - pkg:  golang.org/x/net/context
            desc: context package from stdlib should be used instead
          - pkg:  go.opentelemetry.io/otel/sdk
            desc: Direct use of OTEL SDK is not allowed. Use "stash.delta.sbrf.ru/cia/sberldap/pkg/telemetry" instead
          - pkg:  errors
            desc: Use "stash.delta.sbrf.ru/cia/sberldap/pkg/errors" instead
          - pkg:  log
            desc: Use "stash.delta.sbrf.ru/cia/sberldap/pkg/log" instead

  wrapcheck:
    ignoreSigs:
      - .Errorf(
      - errors.New(
      - errors.Unwrap(
      - errors.Join(
      - .Wrap(
      - .Wrapf(
      - .WithMessage(
      - .WithMessagef(
      - .WithStack(
      - errwrap.ErrWrap(

  wsl:
    allow-cuddle-declarations:       true # разрешить не объединять все подряд идущие var в один var (...)
    allow-separated-leading-comment: true # Разрешить ведущие пробелы в функции при наличии комментариев

  revive:
    rules:
      - name:     var-naming  # Отключает требование преобразовывать известные аббревиатуры в верхний регистр (вместо JsonParser не будет требовать JSONParser)
        disabled: true

  stylecheck: # То же самое, но в другом линтере (конкретно про ST1003, остальные исключения взяты из доки, рекомендуются по-умолчанию)
    checks: [ "all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022" ]

  gocritic:
    enabled-checks:
      - boolExprSimplify      # Упрощение логических выражений.
      - emptyStringTest       # Проверяет на неэффективные проверки пустых строк.

  lll:
    line-length: 160          # Ограничение длины строки для повышения читаемости.

  prealloc:
    simple: true              # Предлагать аллокацию памяти в срезах, если размер известен заранее.

  cyclop:
    max-complexity: 15        # Ограничение на цикломатическую сложность; слишком высокая сложность может указывать на необходимость рефакторинга.

  unparam:
    check-exported: true      # Проверять экспортируемые функции на неиспользуемые параметры.

  staticcheck:
    checks:
      - SA1000                # Разные предупреждения по использованию Go API.
      - SA1001                # Упрощение синтаксиса и использования типов.
      - SA1002                # Обработка паник.
      - SA2000                # Управление ресурсами (например, закрытие файлов).
      - SA4010                # Проверка на утечки и ошибки в работе с памятью.

  govet:
    enable:
      - shadow                # Включение проверки shadow напрямую, так как govet.check-shadowing устарела.

  mnd:
    checks:
      - argument
      - case
      - condition
      - return
      - assign
    ignored-numbers:
      - '0o666'
      - '0o644'
      - '0o755'

  tagliatelle:
    case:
      use-field-name: true
      rules:
        json: snake
        yaml: snake

  perfsprint:
    errorf: false             # Чтобы ошибки начали влиять на производительность, их должно быть астрономическое количество

  nlreturn:
    block-size: 2

  errcheck:
    check-type-assertions: true

  funlen:
    ignore-comments: true

  exhaustive:
    default-signifies-exhaustive: true
    default-case-required:        false

  gomoddirectives:
    replace-local: true
    replace-allow-list:
      - github.com/gocql/gocql # https://github.com/scylladb/gocql?tab=readme-ov-file#2-installation
